[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "github-pr-bot"
version = "0.1.0"
description = "Temporal-powered GitHub PR automation bot"
readme = "README.md"
requires-python = ">=3.11"
license = { text = "MIT" }
authors = [{ name = "Abhishek" }]
keywords = ["temporal", "github", "automation", "pr", "bot"]

dependencies = [
    "temporalio>=1.12.0",
    "GitPython>=3.1.44",
    "requests>=2.30.0",
    "pydantic>=2.11.7",
    "pytest>=8.4.1",
    "google-genai>=1.24.0",
    "textual>=3.5.0",
]

[project.optional-dependencies]
dev = [
    "ruff>=0.1.0",
    "mypy>=1.0.0",
    "pytest>=8.0.0",
    "pytest-asyncio>=0.23.0",
    "pytest-cov>=4.1.0",
    "pre-commit>=3.6.0",
]

[project.urls]
Homepage = "https://github.com/abhishekmishragithub/temporal-task"
Repository = "https://github.com/abhishekmishragithub/temporal-task"
Issues = "https://github.com/abhishekmishragithub/temporal-task/issues"

[tool.hatch.build.targets.wheel]
packages = ["src/github_pr_bot"]

[tool.ruff]
target-version = "py39"
line-length = 88

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
    "PTH", # flake8-use-pathlib
]
ignore = [
    "E501",   # line too long, handled by ruff format
    "B008",   # do not perform function calls in argument defaults
    "C901",   # too complex
    "W505",   # line too long, handled by ruff format
    "B904",   # Within except clause, raise exceptions with raise ... from err
    "ARG002", # Unused method argument
    "ARG001", # Unused function argument
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.lint.isort]
known-first-party = ["github_pr_bot"]

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = ["git", "textual.*", "google-genai"]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
asyncio_mode = "auto"
addopts = ["-v", "--cov=src", "--cov-report=term-missing", "--cov-report=html"]

[tool.coverage.run]
source = ["src"]
omit = ["*/tests/*", "*/test_*.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
]
